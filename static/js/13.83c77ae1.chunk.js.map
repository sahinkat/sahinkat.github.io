{"version":3,"sources":["utils/AllDataUtils.js","views/DeathsPerCase/DeathsPerCase.js"],"names":["axios","require","moment","__webpack_exports__","getCases","context","countryKey","callback","allDataObject","country","undefined","cases","length","get","CountryName","then","_ref","data","timeline","deaths","previousCases","previousDeaths","key","hasOwnProperty","push","Date","format","Key","Confirmed","Deaths","NewCases","NewDeaths","catch","error","console","log","_","colorSet","colorCode","getStyle","DeathsPerCase","props","_this","Object","_home_sahinkatlan_Repositories_github_covid_19_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_sahinkatlan_Repositories_github_covid_19_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_sahinkatlan_Repositories_github_covid_19_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","loading","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","state","mainChartOpts","tooltips","enabled","custom","CustomTooltips","intersect","mode","position","callbacks","labelColor","tooltipItem","chart","backgroundColor","datasets","datasetIndex","borderColor","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","maxTicksLimit","elements","point","radius","hitRadius","hoverRadius","hoverBorderWidth","inputs","selectedCountry","selectedCountries","selectedTypeTotalNewChange","mainChart","labels","radioSelected","self","target","value","setState","AllDataUtils","newContext","drawCovidGraph","removedCountry","remove","e","graphData","strMinDate","forEach","countryData","minDate","today","setDate","getDate","index","maxValue","totalCasesFooter","totalDeathsFooter","totalNewCasesFooter","totalNewDeathsFooter","countryConfirmedData","previousNumber","lastCountryData","date","countryDataAtDate","find","calcData","ma","ema","wma","label","pointHoverBackgroundColor","borderWidth","tempMaxValue","max","_this2","_ThemeContextProvider__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","row","md","htmlFor","type","name","id","bsSize","onChange","onCountryChange","bind","countries","map","r","i","onTypeTotalNewChange","color","isOpen","toggle","onDismiss","sm","aria-label","onClick","onRadioBtnClick","active","style","height","marginTop","react_chartjs_2__WEBPACK_IMPORTED_MODULE_6__","options","Component"],"mappings":"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","file":"static/js/13.83c77ae1.chunk.js","sourcesContent":["const axios = require('axios');\nvar moment = require('moment');\n\nlet _getCases = function (context, countryKey, callback) {\n  let allDataObject = context.allDataObject;\n  let country = allDataObject[countryKey];\n\n  if(country.cases === undefined || country.cases.length === 0) {\n    country.cases = [];\n    axios.get('https://corona.lmao.ninja/v2/historical/' + country.CountryName + '?lastdays=365')\n      .then(function ({ data }) {\n        let cases = data.timeline.cases;\n        let deaths = data.timeline.deaths;\n        let previousCases = 0;\n        let previousDeaths = 0;\n        for (let key in cases) {\n          if (cases.hasOwnProperty(key)) {\n            country.cases.push(\n              {\n                \"Date\":moment(key, 'MM/DD/YYYY').format('YYYY-MM-DD'),\n                \"Key\": countryKey,\n                \"Confirmed\":cases[key] >= previousCases ? cases[key] : previousCases,\n                \"Deaths\":deaths[key] | previousDeaths,\n                \"NewCases\":cases[key] >= previousCases ? (cases[key] - previousCases) : 0,\n                \"NewDeaths\":(deaths[key] - previousDeaths) | 0\n              }\n            );\n            previousCases = cases[key];\n            previousDeaths = deaths[key];\n          }\n        }\n\n        allDataObject[countryKey] = country;\n        context.allDataObject = allDataObject;\n        callback(context);\n      })\n      .catch(function (error) {\n        // handle error\n        console.log(error);\n      });\n  } else {\n    callback(context);\n  }\n};\n\nexport default {\n    'getCases' : _getCases\n};\n","import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Alert,\n  Button,\n  ButtonGroup,\n  ButtonToolbar,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Col,\n  FormGroup,\n  Input,\n  Label,\n  Row\n} from 'reactstrap';\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\nimport { getStyle } from '@coreui/coreui/dist/js/coreui-utilities';\nimport {\n  ma, ema, wma\n} from 'moving-averages'\nimport { ThemeContextConsumer } from \"../../ThemeContextProvider\";\nimport AllDataUtils from '../../utils/AllDataUtils';\n\nvar _ = require('lodash');\nvar moment = require('moment');\n\nconst colorSet = [\"primary\", \"warning\", \"success\", \"danger\", \"info\"];\nconst colorCode = [getStyle('--primary'), getStyle('--warning'), getStyle('--success'), getStyle('--danger'), getStyle('--info')];\n\nclass DeathsPerCase extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mainChartOpts : {\n        tooltips: {\n          enabled: false,\n          custom: CustomTooltips,\n          intersect: true,\n          mode: 'index',\n          position: 'nearest',\n          callbacks: {\n            labelColor: function(tooltipItem, chart) {\n              return { backgroundColor: chart.data.datasets[tooltipItem.datasetIndex].borderColor }\n            }\n          }\n        },\n        maintainAspectRatio: false,\n        legend: {\n          display: true,\n        },\n        scales: {\n          xAxes: [\n            {\n              gridLines: {\n                drawOnChartArea: true,\n              },\n            }],\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                maxTicksLimit: 40\n              },\n            }],\n        },\n        elements: {\n          point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3,\n          },\n        },\n      },\n      inputs : {\n        selectedCountry   : \"\",\n        selectedCountries : [],\n        selectedTypeTotalNewChange : \"NewDeaths\"\n      },\n      mainChart : {\n        labels: [],\n        datasets: [],\n      },\n      radioSelected : 0,\n    };\n  }\n\n  loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\n\n  onCountryChange(context, selectedCountry) {\n    let self = this;\n    selectedCountry = selectedCountry.target.value;\n    if(selectedCountry !== ''){\n      let inputs = this.state.inputs;\n      inputs.selectedCountries.push(selectedCountry);\n      this.setState({\n        inputs : inputs,\n      });\n    }\n    AllDataUtils.getCases(context, selectedCountry, function(newContext){\n      self.drawCovidGraph(newContext);\n    });\n  }\n\n  onTypeTotalNewChange(context, selectedTypeTotalNewChange) {\n    if(selectedTypeTotalNewChange.target.value !== ''){\n      let inputs = this.state.inputs;\n      inputs.selectedTypeTotalNewChange = selectedTypeTotalNewChange.target.value;\n      this.setState({\n        inputs : inputs,\n      });\n    }\n\n    this.drawCovidGraph(context);\n  }\n\n  onDismiss(removedCountry, context) {\n    if(removedCountry !== ''){\n      let inputs = this.state.inputs;\n      _.remove(inputs.selectedCountries, function (country) {\n        return country === removedCountry;\n      });\n      this.setState({\n        inputs : inputs,\n      });\n    }\n\n    this.drawCovidGraph(context);\n  }\n\n  onRadioBtnClick(e, context){\n    this.setState({\n      radioSelected : e,\n    }, this.drawCovidGraph(context));\n  }\n\n  drawCovidGraph(context){\n    let self = this;\n    let allDataObject = context.allDataObject;\n    let selectedCountries = this.state.inputs.selectedCountries;\n    let selectedTypeTotalNewChange = this.state.inputs.selectedTypeTotalNewChange;\n    let mainChart = this.state.mainChart;\n\n    let graphData = [];\n    mainChart.labels = [];\n    mainChart.datasets = [];\n    let strMinDate = \"9999-99-99\";\n    selectedCountries.forEach(function (country) {\n      let countryData = allDataObject[country];\n      graphData.push(countryData);\n      if(countryData.cases !== undefined && countryData.cases.length > 0) {\n        if(strMinDate > countryData.cases[0].Date) {\n          strMinDate = countryData.cases[0].Date;\n        }\n      }\n    });\n    let minDate = new Date(strMinDate);\n    let today = new Date();\n\n    while(minDate < today) {\n      mainChart.labels.push(moment(minDate).format('DD/MM/YYYY'));\n      minDate.setDate(minDate.getDate() + 1);\n    }\n\n    let index = 0;\n    let maxValue = 0;\n    let totalCasesFooter = 0;\n    let totalDeathsFooter = 0;\n    let totalNewCasesFooter = 0;\n    let totalNewDeathsFooter = 0;\n    graphData.forEach(function (data) {\n      let countryConfirmedData = [];\n      let previousNumber = 0;\n      let lastCountryData = {};\n      mainChart.labels.forEach(function (date) {\n        let countryDataAtDate = _.find(data.cases, ['Date', moment(date, 'DD/MM/YYYY').format('YYYY-MM-DD')]);\n        if(countryDataAtDate !== undefined){\n          let deaths = (countryDataAtDate[selectedTypeTotalNewChange] | 0);\n          let calcData = selectedTypeTotalNewChange === \"NewDeaths\" ?\n          (deaths / (countryDataAtDate.NewCases | 0) ? deaths / (countryDataAtDate.NewCases | 0) : 0) :\n          (deaths / (countryDataAtDate.Confirmed | 0) ? deaths / (countryDataAtDate.Confirmed | 0) : 0);\n          countryConfirmedData.push(calcData);\n          previousNumber = calcData;\n          lastCountryData = countryDataAtDate;\n          totalNewCasesFooter += lastCountryData[\"NewCases\"] | 0;\n          totalNewDeathsFooter += lastCountryData[\"NewDeaths\"] | 0;\n        } else {\n          countryConfirmedData.push(previousNumber);\n        }\n      });\n      totalCasesFooter += lastCountryData[\"Confirmed\"] | 0;\n      totalDeathsFooter += lastCountryData[\"Deaths\"] | 0;\n\n      if(self.state.radioSelected === 1){\n        countryConfirmedData = ma(countryConfirmedData, 3);\n      } else if(self.state.radioSelected === 2){\n        countryConfirmedData = ema(countryConfirmedData, 3);\n      } else if(self.state.radioSelected === 3){\n        countryConfirmedData = wma(countryConfirmedData, 3);\n      }\n\n      mainChart.datasets.push({\n        label: data.CountryName,\n        backgroundColor: 'transparent',\n        borderColor: colorCode[index],\n        pointHoverBackgroundColor: '#fff',\n        borderWidth: 2,\n        data: countryConfirmedData,\n      });\n      index++;\n      let tempMaxValue = _.max(countryConfirmedData);\n      if(maxValue < tempMaxValue){\n        maxValue = tempMaxValue;\n      }\n    });\n\n    this.setState({\n      mainChart : mainChart,\n      totalCasesFooter : totalCasesFooter,\n      totalDeathsFooter : totalDeathsFooter,\n      totalNewCasesFooter : totalNewCasesFooter,\n      totalNewDeathsFooter : totalNewDeathsFooter\n    });\n\n  }\n\n  render() {\n\n    return (\n      <ThemeContextConsumer>\n        {context => (\n          <div className=\"animated fadeIn\">\n            <Row>\n              <Col>\n                <Card>\n                  <CardHeader>\n                    <FormGroup row>\n                      <Col md=\"4\">\n                        <Label htmlFor=\"countries\"><mark className=\"text-primary\"><strong><small>*Countries</small></strong></mark></Label>\n                        <Input type=\"select\" name=\"countries\" id=\"countries\" bsSize=\"sm\" value={this.state.inputs.selectedCountry} onChange={this.onCountryChange.bind(this, context)}>\n                          <option value=\"\">Please add a country</option>\n                          {\n                            context.countries.map((r , i) => <option key={i} value={r.Key}>{r.CountryName}</option>)\n                          }\n                        </Input>\n                      </Col>\n                      <Col md=\"4\">\n                        <Label htmlFor=\"typeTotalNew\"><mark className=\"text-primary\"><strong><small>*Type</small></strong></mark></Label>\n                        <Input type=\"select\" name=\"typeTotalNew\" id=\"typeTotalNew\" bsSize=\"sm\" value={this.state.inputs.selectedTypeTotalNewChange} onChange={this.onTypeTotalNewChange.bind(this, context)}>\n                          <option value=\"NewDeaths\">New Deaths</option>\n                          <option value=\"Deaths\">Deaths</option>\n                        </Input>\n                      </Col>\n                    </FormGroup>\n                    <Row>\n                    {\n                      this.state.inputs.selectedCountries.map((r , i) =>\n                        <Alert className=\"mb-0 mr-1 pr-5\" key={r + i} color={i < 5 ? colorSet[i] : colorSet[4]} isOpen={true} toggle={this.onDismiss.bind(this, r, context)}>\n                          <div>{context.allDataObject[r].CountryName}</div>\n                        </Alert>\n                      )\n                    }\n                    </Row>\n                  </CardHeader>\n                  <CardBody>\n                    <Row>\n                      <Col sm=\"5\">\n                        <CardTitle className=\"mb-0\">Covid-19 Statistics</CardTitle>\n                      </Col>\n                      <Col sm=\"7\" className=\"d-none d-sm-inline-block\">\n                        <ButtonToolbar className=\"float-right\" aria-label=\"Toolbar with button groups\">\n                          <ButtonGroup className=\"mr-3\" aria-label=\"First group\">\n                            <Button className=\"text-dark\" color=\"outline-primary\" onClick={() => this.onRadioBtnClick(0, context)} active={this.state.radioSelected !== 0}>Normal</Button>\n                            <Button className=\"text-dark\" color=\"outline-primary\" onClick={() => this.onRadioBtnClick(1, context)} active={this.state.radioSelected !== 1}>MA</Button>\n                            <Button className=\"text-dark\" color=\"outline-primary\" onClick={() => this.onRadioBtnClick(2, context)} active={this.state.radioSelected !== 2}>EMA</Button>\n                            <Button className=\"text-dark\" color=\"outline-primary\" onClick={() => this.onRadioBtnClick(3, context)} active={this.state.radioSelected !== 3}>WMA</Button>\n                          </ButtonGroup>\n                        </ButtonToolbar>\n                      </Col>\n                    </Row>\n                    <div className=\"chart-wrapper\" style={{ height: 300 + 'px', marginTop: 5 + 'px' }}>\n                       {\n                         <Line data={this.state.mainChart} options={this.state.mainChartOpts} height={300} />\n                       }\n                    </div>\n                  </CardBody>\n                  <CardFooter>\n                    <Row className=\"text-center\">\n                      <Col sm={12} md className=\"mb-sm-2 mb-0\">\n                        <div className=\"text-muted\">Total Cases</div>\n                        <strong>{this.state.totalCasesFooter}</strong>\n                      </Col>\n                      <Col sm={12} md className=\"mb-sm-2 mb-0 d-md-down-none\">\n                        <div className=\"text-muted\">Total Deaths</div>\n                        <strong>{this.state.totalDeathsFooter}</strong>\n                      </Col>\n                      <Col sm={12} md className=\"mb-sm-2 mb-0\">\n                        <div className=\"text-muted\">New Cases</div>\n                        <strong>{this.state.totalNewCasesFooter}</strong>\n                      </Col>\n                      <Col sm={12} md className=\"mb-sm-2 mb-0 d-md-down-none\">\n                        <div className=\"text-muted\">New Deaths</div>\n                        <strong>{this.state.totalNewDeathsFooter}</strong>\n                      </Col>\n                    </Row>\n                  </CardFooter>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </ThemeContextConsumer>\n    );\n  }\n}\n\nexport default DeathsPerCase;\n"],"sourceRoot":""}