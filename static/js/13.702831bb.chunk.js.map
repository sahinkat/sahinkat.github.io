{"version":3,"sources":["views/Deaths/Deaths.js"],"names":["_","require","moment","colorSet","colorCode","getStyle","Deaths","props","_this","Object","_home_sahinkatlan_Repositories_github_covid_19_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_sahinkatlan_Repositories_github_covid_19_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_sahinkatlan_Repositories_github_covid_19_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","loading","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","className","state","mainChartOpts","tooltips","enabled","custom","CustomTooltips","intersect","mode","position","callbacks","labelColor","tooltipItem","chart","backgroundColor","data","datasets","datasetIndex","borderColor","maintainAspectRatio","legend","display","scales","xAxes","gridLines","drawOnChartArea","yAxes","ticks","beginAtZero","maxTicksLimit","elements","point","radius","hitRadius","hoverRadius","hoverBorderWidth","inputs","selectedCountry","selectedCountries","selectedTypeTotalNewChange","mainChart","labels","radioSelected","context","target","value","push","setState","drawCovidGraph","removedCountry","remove","country","e","self","allDataObject","graphData","strMinDate","forEach","countryData","undefined","cases","length","Date","minDate","today","format","setDate","getDate","index","maxValue","totalCasesFooter","totalDeathsFooter","totalNewCasesFooter","totalNewDeathsFooter","countryConfirmedData","previousNumber","lastCountryData","date","countryDataAtDate","find","ma","ema","wma","label","CountryName","pointHoverBackgroundColor","borderWidth","tempMaxValue","max","stepSize","Math","ceil","_this2","_ThemeContextProvider__WEBPACK_IMPORTED_MODULE_11__","reactstrap__WEBPACK_IMPORTED_MODULE_7__","row","md","htmlFor","type","name","id","bsSize","onChange","onCountryChange","bind","countries","map","r","i","key","Key","onTypeTotalNewChange","color","isOpen","toggle","onDismiss","sm","aria-label","onClick","onRadioBtnClick","active","style","height","marginTop","react_chartjs_2__WEBPACK_IMPORTED_MODULE_6__","options","Component"],"mappings":"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","file":"static/js/13.702831bb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport {\n  Alert,\n  Button,\n  ButtonGroup,\n  ButtonToolbar,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n  Col,\n  FormGroup,\n  Input,\n  Label,\n  Row\n} from 'reactstrap';\nimport { CustomTooltips } from '@coreui/coreui-plugin-chartjs-custom-tooltips';\nimport { getStyle } from '@coreui/coreui/dist/js/coreui-utilities';\nimport {\n  ma, ema, wma\n} from 'moving-averages'\nimport { ThemeContextConsumer } from \"../../ThemeContextProvider\";\n\nvar _ = require('lodash');\nvar moment = require('moment');\n\nconst colorSet = [\"primary\", \"warning\", \"success\", \"danger\", \"info\"];\nconst colorCode = [getStyle('--primary'), getStyle('--warning'), getStyle('--success'), getStyle('--danger'), getStyle('--info')];\n\nclass Deaths extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      mainChartOpts : {\n        tooltips: {\n          enabled: false,\n          custom: CustomTooltips,\n          intersect: true,\n          mode: 'index',\n          position: 'nearest',\n          callbacks: {\n            labelColor: function(tooltipItem, chart) {\n              return { backgroundColor: chart.data.datasets[tooltipItem.datasetIndex].borderColor }\n            }\n          }\n        },\n        maintainAspectRatio: false,\n        legend: {\n          display: true,\n        },\n        scales: {\n          xAxes: [\n            {\n              gridLines: {\n                drawOnChartArea: true,\n              },\n            }],\n          yAxes: [\n            {\n              ticks: {\n                beginAtZero: true,\n                maxTicksLimit: 40,\n              },\n            }],\n        },\n        elements: {\n          point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3,\n          },\n        },\n      },\n      inputs : {\n        selectedCountry   : \"\",\n        selectedCountries : [],\n        selectedTypeTotalNewChange : \"NewDeaths\"\n      },\n      mainChart : {\n        labels: [],\n        datasets: [],\n      },\n      radioSelected : 0,\n    };\n  }\n\n  loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>\n\n  onCountryChange(context, selectedCountry) {\n    if(selectedCountry.target.value !== ''){\n      let inputs = this.state.inputs;\n      inputs.selectedCountries.push(selectedCountry.target.value);\n      this.setState({\n        inputs : inputs,\n      });\n    }\n\n    this.drawCovidGraph(context);\n  }\n\n  onTypeTotalNewChange(context, selectedTypeTotalNewChange) {\n    if(selectedTypeTotalNewChange.target.value !== ''){\n      let inputs = this.state.inputs;\n      inputs.selectedTypeTotalNewChange = selectedTypeTotalNewChange.target.value;\n      this.setState({\n        inputs : inputs,\n      });\n    }\n\n    this.drawCovidGraph(context);\n  }\n\n  onDismiss(removedCountry, context) {\n    if(removedCountry !== ''){\n      let inputs = this.state.inputs;\n      _.remove(inputs.selectedCountries, function (country) {\n        return country === removedCountry;\n      });\n      this.setState({\n        inputs : inputs,\n      });\n    }\n\n    this.drawCovidGraph(context);\n  }\n\n  onRadioBtnClick(e, context){\n    this.setState({\n      radioSelected : e,\n    }, this.drawCovidGraph(context));\n  }\n\n  drawCovidGraph(context){\n    let self = this;\n    let allDataObject = context.allDataObject;\n    let selectedCountries = this.state.inputs.selectedCountries;\n    let selectedTypeTotalNewChange = this.state.inputs.selectedTypeTotalNewChange;\n    let mainChart = this.state.mainChart;\n\n    let graphData = [];\n    mainChart.labels = [];\n    mainChart.datasets = [];\n    let strMinDate = \"9999-99-99\";\n    selectedCountries.forEach(function (country) {\n      let countryData = allDataObject[country];\n      graphData.push(countryData);\n      if(countryData.cases !== undefined && countryData.cases.length > 0) {\n        if(strMinDate > countryData.cases[0].Date) {\n          strMinDate = countryData.cases[0].Date;\n        }\n      }\n    });\n    let minDate = new Date(strMinDate);\n    let today = new Date();\n\n    while(minDate < today) {\n      mainChart.labels.push(moment(minDate).format('DD/MM/YYYY'));\n      minDate.setDate(minDate.getDate() + 1);\n    }\n\n    let index = 0;\n    let maxValue = 0;\n    let totalCasesFooter = 0;\n    let totalDeathsFooter = 0;\n    let totalNewCasesFooter = 0;\n    let totalNewDeathsFooter = 0;\n    graphData.forEach(function (data) {\n      let countryConfirmedData = [];\n      let previousNumber = 0;\n      let lastCountryData = {};\n      mainChart.labels.forEach(function (date) {\n        let countryDataAtDate = _.find(data.cases, ['Date', moment(date, 'DD/MM/YYYY').format('YYYY-MM-DD')]);\n        if(countryDataAtDate !== undefined){\n          countryConfirmedData.push(countryDataAtDate[selectedTypeTotalNewChange] | 0);\n          previousNumber = countryDataAtDate[selectedTypeTotalNewChange] | 0;\n          lastCountryData = countryDataAtDate;\n          totalNewCasesFooter += lastCountryData[\"NewCases\"] | 0;\n          totalNewDeathsFooter += lastCountryData[\"NewDeaths\"] | 0;\n        } else {\n          countryConfirmedData.push(previousNumber);\n        }\n      });\n      totalCasesFooter += lastCountryData[\"Confirmed\"] | 0;\n      totalDeathsFooter += lastCountryData[\"Deaths\"] | 0;\n\n      if(self.state.radioSelected === 1){\n        countryConfirmedData = ma(countryConfirmedData, 3);\n      } else if(self.state.radioSelected === 2){\n        countryConfirmedData = ema(countryConfirmedData, 3);\n      } else if(self.state.radioSelected === 3){\n        countryConfirmedData = wma(countryConfirmedData, 3);\n      }\n\n      mainChart.datasets.push({\n        label: data.CountryName,\n        backgroundColor: 'transparent',\n        borderColor: colorCode[index],\n        pointHoverBackgroundColor: '#fff',\n        borderWidth: 2,\n        data: countryConfirmedData,\n      });\n      index++;\n      let tempMaxValue = _.max(countryConfirmedData);\n      if(maxValue < tempMaxValue){\n        maxValue = tempMaxValue;\n      }\n    });\n    let mainChartOpts = this.state.mainChartOpts;\n    mainChartOpts.scales.yAxes.ticks = {\n      beginAtZero: true,\n      maxTicksLimit: 50,\n      stepSize: Math.ceil(maxValue*1.1/50),\n      max: Math.ceil(maxValue*1.1),\n    };\n    this.setState({\n      mainChart : mainChart,\n      mainChartOpts : mainChartOpts,\n      totalCasesFooter : totalCasesFooter,\n      totalDeathsFooter : totalDeathsFooter,\n      totalNewCasesFooter : totalNewCasesFooter,\n      totalNewDeathsFooter : totalNewDeathsFooter\n    });\n\n  }\n\n  render() {\n\n    return (\n      <ThemeContextConsumer>\n        {context => (\n          <div className=\"animated fadeIn\">\n            <Row>\n              <Col>\n                <Card>\n                  <CardHeader>\n                    <FormGroup row>\n                      <Col md=\"4\">\n                        <Label htmlFor=\"countries\"><mark className=\"text-primary\"><strong><small>*Countries</small></strong></mark></Label>\n                        <Input type=\"select\" name=\"countries\" id=\"countries\" bsSize=\"sm\" value={this.state.inputs.selectedCountry} onChange={this.onCountryChange.bind(this, context)}>\n                          <option value=\"\">Please add a country</option>\n                          {\n                            context.countries.map((r , i) => <option key={i} value={r.Key}>{r.CountryName}</option>)\n                          }\n                        </Input>\n                      </Col>\n                      <Col md=\"4\">\n                        <Label htmlFor=\"typeTotalNew\"><mark className=\"text-primary\"><strong><small>*Type</small></strong></mark></Label>\n                        <Input type=\"select\" name=\"typeTotalNew\" id=\"typeTotalNew\" bsSize=\"sm\" value={this.state.inputs.selectedTypeTotalNewChange} onChange={this.onTypeTotalNewChange.bind(this, context)}>\n                          <option value=\"NewDeaths\">New Deaths</option>\n                          <option value=\"Deaths\">Deaths</option>\n                        </Input>\n                      </Col>\n                    </FormGroup>\n                    <Row>\n                    {\n                      this.state.inputs.selectedCountries.map((r , i) =>\n                        <Alert className=\"mb-0 mr-1 pr-5\" key={r + i} color={i < 5 ? colorSet[i] : colorSet[4]} isOpen={true} toggle={this.onDismiss.bind(this, r, context)}>\n                          <div>{context.allDataObject[r].CountryName}</div>\n                        </Alert>\n                      )\n                    }\n                    </Row>\n                  </CardHeader>\n                  <CardBody>\n                    <Row>\n                      <Col sm=\"5\">\n                        <CardTitle className=\"mb-0\">Covid-19 Statistics</CardTitle>\n                      </Col>\n                      <Col sm=\"7\" className=\"d-none d-sm-inline-block\">\n                        <ButtonToolbar className=\"float-right\" aria-label=\"Toolbar with button groups\">\n                          <ButtonGroup className=\"mr-3\" aria-label=\"First group\">\n                            <Button className=\"text-dark\" color=\"outline-primary\" onClick={() => this.onRadioBtnClick(0, context)} active={this.state.radioSelected !== 0}>Normal</Button>\n                            <Button className=\"text-dark\" color=\"outline-primary\" onClick={() => this.onRadioBtnClick(1, context)} active={this.state.radioSelected !== 1}>MA</Button>\n                            <Button className=\"text-dark\" color=\"outline-primary\" onClick={() => this.onRadioBtnClick(2, context)} active={this.state.radioSelected !== 2}>EMA</Button>\n                            <Button className=\"text-dark\" color=\"outline-primary\" onClick={() => this.onRadioBtnClick(3, context)} active={this.state.radioSelected !== 3}>WMA</Button>\n                          </ButtonGroup>\n                        </ButtonToolbar>\n                      </Col>\n                    </Row>\n                    <div className=\"chart-wrapper\" style={{ height: 300 + 'px', marginTop: 5 + 'px' }}>\n                       {\n                         <Line data={this.state.mainChart} options={this.state.mainChartOpts} height={300} />\n                       }\n                    </div>\n                  </CardBody>\n                  <CardFooter>\n                    <Row className=\"text-center\">\n                      <Col sm={12} md className=\"mb-sm-2 mb-0\">\n                        <div className=\"text-muted\">Total Cases</div>\n                        <strong>{this.state.totalCasesFooter}</strong>\n                      </Col>\n                      <Col sm={12} md className=\"mb-sm-2 mb-0 d-md-down-none\">\n                        <div className=\"text-muted\">Total Deaths</div>\n                        <strong>{this.state.totalDeathsFooter}</strong>\n                      </Col>\n                      <Col sm={12} md className=\"mb-sm-2 mb-0\">\n                        <div className=\"text-muted\">New Cases</div>\n                        <strong>{this.state.totalNewCasesFooter}</strong>\n                      </Col>\n                      <Col sm={12} md className=\"mb-sm-2 mb-0 d-md-down-none\">\n                        <div className=\"text-muted\">New Deaths</div>\n                        <strong>{this.state.totalNewDeathsFooter}</strong>\n                      </Col>\n                    </Row>\n                  </CardFooter>\n                </Card>\n              </Col>\n            </Row>\n          </div>\n        )}\n      </ThemeContextConsumer>\n    );\n  }\n}\n\nexport default Deaths;\n"],"sourceRoot":""}